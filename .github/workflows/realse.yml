name: CLI Build on Main (GoReleaser)

on:
  push:
    branches:
      - main # Trigger this workflow on every push to the 'main' branch.
    tags:
      - 'v*.*.*' # Trigger on version tags like v1.0.0, v2.1.3, etc.
jobs:
  build:
    runs-on: ubuntu-latest # Use a Linux runner for building
    permissions:
      contents: write # Only read permission is needed as we are not creating a release.

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Action to check out your repository code.
        with:
          fetch-depth: 0 # Fetch all history for all tags

      - name: Configure Git 
        run : |
          git config user.name "Github Actions Bot"
          git config user.email "actions@github.com"

      - name: Get latest tag and calculate new version
        id: tag_calculation
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v${{ github.event.inputs.initial_version }}")
          echo "Latest tag found (or initial): $LATEST_TAG"

          # Remove 'v' prefix for version parsing
          VERSION_NUM=${LATEST_TAG#v}

          # Split into major, minor, patch
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_NUM"

          BUMP_TYPE="${{ github.event.inputs.bump_type }}"

          NEW_MAJOR=$MAJOR
          NEW_MINOR=$MINOR
          NEW_PATCH=$PATCH+1

          NEW_VERSION="v${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
          echo "New version calculated: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
      - name: Create and Push New Tag
        id: tag_creation
        run: |
          NEW_TAG="${{ steps.tag_calculation.outputs.new_version }}"
          echo "Attempting to create and push tag: $NEW_TAG"
          
          # Check if tag already exists locally or remotely
          if git rev-parse "$NEW_TAG" >/dev/null 2>&1 || git ls-remote --tags origin "$NEW_TAG" | grep -q "$NEW_TAG"; then
            echo "Tag $NEW_TAG already exists. Skipping tag creation."
            echo "new_tag_pushed=false" >> $GITHUB_OUTPUT
          else
            git tag -a "$NEW_TAG" -m "Release $NEW_TAG"
            git push origin "$NEW_TAG"
            echo "Tag $NEW_TAG pushed successfully."
            echo "new_tag_pushed=true" >> $GITHUB_OUTPUT
            echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT # Output the actual tag pushed
          fi

      - name: Set up Go
        uses: actions/setup-go@v5 # Action to set up the Go environment.
        with:
          go-version: '1.25.1' # Using a stable Go version.

      # The 'Create dist directory' and 'Get build info for ldflags' steps are no longer needed,
      # as goreleaser handles these internally.

      - name: Run GoReleaser (Snapshot Build)
        uses: goreleaser/goreleaser-action@v5 # Action to run GoReleaser.
        with:
          distribution: goreleaser # Use the goreleaser binary.
          version: latest # Use the latest version of goreleaser.
          args: release  --clean # Build a snapshot (dev build) and clean up.
          workdir: ./cli_app # <--- IMPORTANT: Run goreleaser from the cli_app directory.
        env:
          # Pass the API Key from GitHub Secrets as an environment variable to goreleaser.
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          